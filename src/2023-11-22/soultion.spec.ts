import { expect, test, describe } from "vitest";
import { solutions as s } from "./solution";

describe("뒤에서 5등까지: https://school.programmers.co.kr/learn/courses/30/lessons/181853", () => {
  test("길이가 5여야 합니다.", () => {
    expect(s[1]([1, 2, 3, 4, 5, 6, 7, 8, 9]).length).toBe(5);
  });

  test("가장 작은 5개의 수를 오름차순으로 담아야 합니다.", () => {
    expect(s[1]([5, 6, 7, 8, 9, 2, 1, 3, 4])).toBe([1, 2, 3, 4, 5]);
  });
  
  test("각 제한사항의 최댓값을 해결할 수 있어야 합니다.", () => {
    const numList = [ 483, 794, 791, 645, 211, 117, 102, 787, 9, 663, 597, 659, 592, 338, 883, 337, 695, 920, 64, 549, 990,
      764, 473, 859, 896, 246, 451, 295, 351, 180, 712, 541, 80, 479, 879, 858, 460, 705, 110, 948, 212,
      644, 558, 594, 859, 627, 528, 622, 64, 210, 203, 842, 702, 128, 755, 583, 29, 981, 249, 845, 48, 982,
      45, 242, 133, 388, 646, 510, 493, 661, 968, 297, 432, 849, 242, 654, 545, 462, 519, 614, 507, 305,
      338, 112, 10, 460, 617, 229, 213, 885, 230, 346, 67, 746, 677, 745, 547, 758, 549, 985 ]
    const result = [ 1, 9, 25, 40, 46 ]
    expect(s[1](numList)).toBe(result);
  });
});
